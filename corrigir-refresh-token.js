require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

// Inicializar cliente Supabase
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function corrigirRefreshToken() {
  try {
    console.log('üîß CORRIGINDO PROBLEMAS DE REFRESH TOKEN');
    console.log('========================================\n');

    // 1. Verificar configura√ß√£o do Supabase
    console.log('1Ô∏è‚É£ Verificando configura√ß√£o do Supabase...');
    
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

    if (!supabaseUrl || !supabaseAnonKey || !supabaseServiceKey) {
      console.log('‚ùå Vari√°veis de ambiente faltando:');
      console.log(`   SUPABASE_URL: ${supabaseUrl ? '‚úÖ' : '‚ùå'}`);
      console.log(`   SUPABASE_ANON_KEY: ${supabaseAnonKey ? '‚úÖ' : '‚ùå'}`);
      console.log(`   SUPABASE_SERVICE_KEY: ${supabaseServiceKey ? '‚úÖ' : '‚ùå'}`);
      return;
    }

    console.log('‚úÖ Todas as vari√°veis de ambiente est√£o configuradas');

    // 2. Verificar usu√°rios existentes
    console.log('\n2Ô∏è‚É£ Verificando usu√°rios existentes...');
    
    const { data: users, error: usersError } = await supabase.auth.admin.listUsers();
    
    if (usersError) {
      console.log(`‚ùå Erro ao listar usu√°rios: ${usersError.message}`);
      return;
    }

    console.log(`‚úÖ Encontrados ${users.users.length} usu√°rios`);

    // 3. Verificar e corrigir sess√µes problem√°ticas
    console.log('\n3Ô∏è‚É£ Verificando sess√µes dos usu√°rios...');
    
    for (const user of users.users) {
      console.log(`\nüë§ Usu√°rio: ${user.email}`);
      console.log(`   ID: ${user.id}`);
      console.log(`   Criado em: ${new Date(user.created_at).toLocaleString()}`);
      console.log(`   √öltima atualiza√ß√£o: ${new Date(user.updated_at).toLocaleString()}`);
      
      // Verificar se o usu√°rio tem confirma√ß√£o de email
      if (!user.email_confirmed_at) {
        console.log('   ‚ö†Ô∏è Email n√£o confirmado');
        
        // Confirmar email automaticamente
        try {
          const { error: confirmError } = await supabase.auth.admin.updateUserById(
            user.id,
            { email_confirm: true }
          );
          
          if (confirmError) {
            console.log(`   ‚ùå Erro ao confirmar email: ${confirmError.message}`);
          } else {
            console.log('   ‚úÖ Email confirmado automaticamente');
          }
        } catch (err) {
          console.log(`   ‚ùå Erro ao confirmar email: ${err.message}`);
        }
      } else {
        console.log('   ‚úÖ Email confirmado');
      }

      // Verificar metadados do usu√°rio
      if (user.user_metadata) {
        console.log('   üìã Metadados:');
        Object.keys(user.user_metadata).forEach(key => {
          console.log(`      ${key}: ${user.user_metadata[key]}`);
        });
      }

      // Verificar se h√° problemas com o perfil
      try {
        const { data: profile, error: profileError } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', user.id)
          .single();

        if (profileError) {
          console.log(`   ‚ö†Ô∏è Problema com perfil: ${profileError.message}`);
          
          // Criar perfil se n√£o existir
          if (profileError.code === 'PGRST116') {
            console.log('   üîß Criando perfil...');
            
            const { error: createError } = await supabase
              .from('profiles')
              .insert({
                id: user.id,
                email: user.email,
                full_name: user.user_metadata?.full_name || user.email.split('@')[0],
                role: user.user_metadata?.role || 'user',
                active: true
              });

            if (createError) {
              console.log(`   ‚ùå Erro ao criar perfil: ${createError.message}`);
            } else {
              console.log('   ‚úÖ Perfil criado com sucesso');
            }
          }
        } else {
          console.log('   ‚úÖ Perfil existe e est√° acess√≠vel');
        }
      } catch (err) {
        console.log(`   ‚ùå Erro ao verificar perfil: ${err.message}`);
      }
    }

    // 4. Criar fun√ß√£o para limpar sess√µes problem√°ticas
    console.log('\n4Ô∏è‚É£ Criando fun√ß√£o para gerenciar sess√µes...');
    
    const sessionManagementSQL = `
      -- Fun√ß√£o para limpar sess√µes expiradas
      CREATE OR REPLACE FUNCTION public.cleanup_expired_sessions()
      RETURNS void AS $$
      BEGIN
        -- Esta fun√ß√£o seria executada periodicamente para limpar sess√µes expiradas
        -- Por seguran√ßa, n√£o vamos implementar limpeza autom√°tica aqui
        RAISE NOTICE 'Fun√ß√£o de limpeza de sess√µes criada';
      END;
      $$ LANGUAGE plpgsql SECURITY DEFINER;
    `;

    try {
      const { error: functionError } = await supabase.rpc('exec_sql', { 
        sql: sessionManagementSQL 
      });

      if (functionError) {
        console.log(`‚ö†Ô∏è N√£o foi poss√≠vel criar fun√ß√£o: ${functionError.message}`);
      } else {
        console.log('‚úÖ Fun√ß√£o de gerenciamento de sess√µes criada');
      }
    } catch (err) {
      console.log(`‚ö†Ô∏è Erro ao criar fun√ß√£o: ${err.message}`);
    }

    // 5. Testar autentica√ß√£o
    console.log('\n5Ô∏è‚É£ Testando autentica√ß√£o...');
    
    // Criar cliente para teste
    const testClient = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    );

    // Verificar se conseguimos obter sess√£o
    const { data: sessionData, error: sessionError } = await testClient.auth.getSession();
    
    if (sessionError) {
      console.log(`‚ö†Ô∏è Erro ao obter sess√£o: ${sessionError.message}`);
    } else {
      console.log('‚úÖ Cliente de autentica√ß√£o funcionando');
      
      if (sessionData.session) {
        console.log('   ‚úÖ Sess√£o ativa encontrada');
      } else {
        console.log('   ‚ÑπÔ∏è Nenhuma sess√£o ativa (normal para script)');
      }
    }

    console.log('\nüéØ RESUMO E RECOMENDA√á√ïES');
    console.log('==========================');
    console.log('‚úÖ Verifica√ß√£o de usu√°rios conclu√≠da');
    console.log('‚úÖ Perfis verificados/criados');
    console.log('‚úÖ Emails confirmados quando necess√°rio');
    
    console.log('\nüìã PARA RESOLVER PROBLEMAS DE REFRESH TOKEN:');
    console.log('1. Certifique-se de que os usu√°rios fa√ßam logout e login novamente');
    console.log('2. Verifique se o AuthContext est√° configurado corretamente');
    console.log('3. Confirme que as vari√°veis de ambiente est√£o corretas no frontend');
    console.log('4. Considere implementar tratamento de erro para tokens expirados');

    console.log('\nüîß C√ìDIGO SUGERIDO PARA AuthContext.tsx:');
    console.log(`
// Adicione este tratamento no AuthContext:
const handleAuthError = (error) => {
  if (error.message.includes('Invalid Refresh Token') || 
      error.message.includes('Refresh Token Not Found')) {
    // Limpar sess√£o local e redirecionar para login
    supabase.auth.signOut();
    router.push('/login');
  }
};

// Use este tratamento em todas as chamadas de API
    `);

  } catch (error) {
    console.error('‚ùå Erro durante a corre√ß√£o:', error.message);
    process.exit(1);
  }
}

corrigirRefreshToken();