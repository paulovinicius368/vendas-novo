const fs = require('fs')
const path = require('path')

// Lista de arquivos que precisam ser corrigidos
const arquivosParaCorrigir = [
  'src/components/settings/UserForm.tsx',
  'src/app/settings/users/page.tsx',
  'src/components/settings/UserManagement.tsx',
  'src/components/settings/UserList.tsx'
]

function corrigirSupabaseKeyError() {
  console.log('üîß CORRIGINDO ERRO supabaseKey is required')
  console.log('=' .repeat(50))
  
  arquivosParaCorrigir.forEach(arquivo => {
    const caminhoCompleto = path.join('c:\\vendas', arquivo)
    
    if (!fs.existsSync(caminhoCompleto)) {
      console.log(`‚ö†Ô∏è Arquivo n√£o encontrado: ${arquivo}`)
      return
    }
    
    console.log(`\nüìù Processando: ${arquivo}`)
    
    let conteudo = fs.readFileSync(caminhoCompleto, 'utf8')
    let modificado = false
    
    // Verificar se j√° tem verifica√ß√£o de vari√°veis de ambiente
    if (!conteudo.includes('if (!supabaseUrl || !supabaseServiceKey)')) {
      // Encontrar a linha onde o supabase √© criado
      const linhaSupabase = conteudo.match(/const supabase = createClient\(supabaseUrl, supabaseServiceKey\)/)
      
      if (linhaSupabase) {
        // Substituir a cria√ß√£o do cliente Supabase com verifica√ß√£o
        const novaConfiguracao = `// Configura√ß√£o do Supabase com verifica√ß√£o
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas!')
  console.error('Verifique NEXT_PUBLIC_SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY no arquivo .env.local')
}

const supabase = createClient(
  supabaseUrl || '', 
  supabaseServiceKey || ''
)`
        
        // Substituir a configura√ß√£o antiga
        conteudo = conteudo.replace(
          /\/\/ Configura√ß√£o do Supabase\nconst supabaseUrl = process\.env\.NEXT_PUBLIC_SUPABASE_URL!\nconst supabaseServiceKey = process\.env\.SUPABASE_SERVICE_ROLE_KEY!\nconst supabase = createClient\(supabaseUrl, supabaseServiceKey\)/,
          novaConfiguracao
        )
        
        modificado = true
      }
    }
    
    // Adicionar verifica√ß√£o de erro na inicializa√ß√£o se n√£o existir
    if (!conteudo.includes('useEffect(() => {') && !conteudo.includes('checkSupabaseConnection')) {
      // Adicionar fun√ß√£o de verifica√ß√£o de conex√£o
      const verificacaoConexao = `
  // Verificar conex√£o com Supabase na inicializa√ß√£o
  useEffect(() => {
    const checkSupabaseConnection = async () => {
      if (!supabaseUrl || !supabaseServiceKey) {
        console.error('‚ùå Configura√ß√£o do Supabase incompleta')
        return
      }
      
      try {
        const { data, error } = await supabase.from('profiles').select('id').limit(1)
        if (error) {
          console.error('‚ùå Erro de conex√£o com Supabase:', error.message)
        } else {
          console.log('‚úÖ Conex√£o com Supabase OK')
        }
      } catch (err) {
        console.error('‚ùå Erro ao verificar conex√£o:', err)
      }
    }
    
    checkSupabaseConnection()
  }, [])
`
      
      // Encontrar onde inserir a verifica√ß√£o (ap√≥s as interfaces)
      const posicaoInsercao = conteudo.indexOf('export default function')
      if (posicaoInsercao > -1) {
        conteudo = conteudo.slice(0, posicaoInsercao) + verificacaoConexao + '\n' + conteudo.slice(posicaoInsercao)
        modificado = true
      }
    }
    
    if (modificado) {
      fs.writeFileSync(caminhoCompleto, conteudo, 'utf8')
      console.log(`‚úÖ Arquivo corrigido: ${arquivo}`)
    } else {
      console.log(`‚ÑπÔ∏è Nenhuma corre√ß√£o necess√°ria: ${arquivo}`)
    }
  })
  
  console.log('\nüéâ CORRE√á√ÉO DE supabaseKey CONCLU√çDA!')
}

// Executar corre√ß√µes
corrigirSupabaseKeyError()