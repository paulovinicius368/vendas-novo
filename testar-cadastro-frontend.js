require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

// Simular o comportamento do hook useAdmin.ts
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// Simular a fun√ß√£o cadastrarUsuario modificada
async function cadastrarUsuario(dadosUsuario) {
  try {
    console.log('üîÑ Iniciando cadastro de usu√°rio...');
    
    // Criar usu√°rio usando Admin API (n√£o faz login autom√°tico)
    const { data: authData, error: authError } = await supabase.auth.admin.createUser({
      email: dadosUsuario.email,
      password: dadosUsuario.senha,
      email_confirm: true, // Confirma o email automaticamente
      user_metadata: {
        full_name: dadosUsuario.full_name
      }
    });

    if (authError) {
      throw authError;
    }

    if (!authData.user) {
      throw new Error('Erro ao criar usu√°rio');
    }

    // Inserir dados na tabela profiles
    const { error: profileError } = await supabase
      .from('profiles')
      .upsert({
        id: authData.user.id,
        full_name: dadosUsuario.full_name,
        email: dadosUsuario.email,
        funcao: 'usuario'
      }, {
        onConflict: 'id'
      });

    if (profileError) {
      throw profileError;
    }

    console.log('‚úÖ Usu√°rio cadastrado com sucesso!');
    return { success: true, user: authData.user };
  } catch (error) {
    console.error('‚ùå Erro ao cadastrar usu√°rio:', error.message);
    return { success: false, error: error.message };
  }
}

async function testarCadastroFrontend() {
  console.log('üß™ TESTANDO FUNCIONALIDADE DE CADASTRO (SIMULA√á√ÉO FRONTEND)');
  console.log('=' .repeat(70));
  
  try {
    // 1. Simular dados do formul√°rio
    console.log('\n1Ô∏è‚É£ SIMULANDO DADOS DO FORMUL√ÅRIO...');
    const dadosFormulario = {
      full_name: 'Jo√£o da Silva',
      email: `joao.silva.${Date.now()}@empresa.com`,
      senha: 'senha123456'
    };
    
    console.log(`Nome: ${dadosFormulario.full_name}`);
    console.log(`Email: ${dadosFormulario.email}`);
    console.log(`Senha: ${'*'.repeat(dadosFormulario.senha.length)}`);
    
    // 2. Verificar sess√£o antes do cadastro
    console.log('\n2Ô∏è‚É£ VERIFICANDO SESS√ÉO ANTES DO CADASTRO...');
    const { data: sessionBefore } = await supabase.auth.getSession();
    console.log('Sess√£o antes:', sessionBefore.session ? 'ATIVA' : 'NENHUMA');
    
    // 3. Executar cadastro
    console.log('\n3Ô∏è‚É£ EXECUTANDO CADASTRO...');
    const resultado = await cadastrarUsuario(dadosFormulario);
    
    if (!resultado.success) {
      console.error('‚ùå Falha no cadastro:', resultado.error);
      return;
    }
    
    // 4. Verificar sess√£o ap√≥s o cadastro
    console.log('\n4Ô∏è‚É£ VERIFICANDO SESS√ÉO AP√ìS CADASTRO...');
    const { data: sessionAfter } = await supabase.auth.getSession();
    console.log('Sess√£o ap√≥s:', sessionAfter.session ? 'ATIVA' : 'NENHUMA');
    
    // 5. Verificar se o usu√°rio foi criado corretamente
    console.log('\n5Ô∏è‚É£ VERIFICANDO USU√ÅRIO CRIADO...');
    const { data: usuarios, error: listError } = await supabase
      .from('profiles')
      .select('id, full_name, email, funcao, created_at')
      .eq('email', dadosFormulario.email);
    
    if (listError) {
      console.error('‚ùå Erro ao listar usu√°rios:', listError.message);
    } else if (usuarios.length > 0) {
      const usuario = usuarios[0];
      console.log('‚úÖ Usu√°rio encontrado na listagem:');
      console.log(`   ID: ${usuario.id}`);
      console.log(`   Nome: ${usuario.full_name}`);
      console.log(`   Email: ${usuario.email}`);
      console.log(`   Fun√ß√£o: ${usuario.funcao}`);
      console.log(`   Criado em: ${new Date(usuario.created_at).toLocaleString('pt-BR')}`);
    }
    
    // 6. Limpar usu√°rio de teste
    console.log('\n6Ô∏è‚É£ LIMPANDO USU√ÅRIO DE TESTE...');
    const { error: deleteError } = await supabase.auth.admin.deleteUser(resultado.user.id);
    
    if (deleteError) {
      console.error('‚ùå Erro ao deletar usu√°rio:', deleteError.message);
    } else {
      console.log('‚úÖ Usu√°rio de teste removido com sucesso!');
    }
    
    console.log('\nüéâ TESTE DE FUNCIONALIDADE CONCLU√çDO!');
    console.log('‚úÖ Cadastro funciona sem afetar sess√£o do administrador');
    console.log('‚úÖ Usu√°rio √© criado corretamente na base de dados');
    console.log('‚úÖ Listagem de usu√°rios funciona normalmente');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
  }
}

testarCadastroFrontend();