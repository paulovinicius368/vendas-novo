require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

// Inicializar cliente Supabase com Service Role Key para usar Admin API
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function testarCadastroSemLogin() {
  console.log('üß™ TESTANDO CADASTRO DE USU√ÅRIO SEM LOGIN AUTOM√ÅTICO');
  console.log('=' .repeat(60));
  
  try {
    // 1. Verificar sess√£o atual (deve estar vazia no contexto do script)
    console.log('\n1Ô∏è‚É£ VERIFICANDO SESS√ÉO ATUAL...');
    const { data: sessionData } = await supabase.auth.getSession();
    console.log('Sess√£o atual:', sessionData.session ? 'ATIVA' : 'NENHUMA');
    
    // 2. Criar usu√°rio de teste usando Admin API
    console.log('\n2Ô∏è‚É£ CRIANDO USU√ÅRIO DE TESTE...');
    const testUser = {
      email: `teste-${Date.now()}@exemplo.com`,
      password: 'senha123456',
      full_name: 'Usu√°rio de Teste'
    };
    
    console.log(`Email: ${testUser.email}`);
    console.log(`Nome: ${testUser.full_name}`);
    
    const { data: authData, error: authError } = await supabase.auth.admin.createUser({
      email: testUser.email,
      password: testUser.password,
      email_confirm: true, // Confirma o email automaticamente
      user_metadata: {
        full_name: testUser.full_name
      }
    });
    
    if (authError) {
      console.error('‚ùå Erro ao criar usu√°rio:', authError.message);
      return;
    }
    
    console.log('‚úÖ Usu√°rio criado com sucesso!');
    console.log(`ID: ${authData.user.id}`);
    
    // 3. Verificar se a sess√£o mudou (n√£o deveria mudar)
    console.log('\n3Ô∏è‚É£ VERIFICANDO SESS√ÉO AP√ìS CRIA√á√ÉO...');
    const { data: sessionAfter } = await supabase.auth.getSession();
    console.log('Sess√£o ap√≥s cria√ß√£o:', sessionAfter.session ? 'ATIVA' : 'NENHUMA');
    
    // 4. Criar perfil na tabela profiles
    console.log('\n4Ô∏è‚É£ CRIANDO PERFIL NA TABELA PROFILES...');
    const { error: profileError } = await supabase
      .from('profiles')
      .insert({
        id: authData.user.id,
        full_name: testUser.full_name,
        email: testUser.email,
        funcao: 'usuario'
      });
    
    if (profileError) {
      console.error('‚ùå Erro ao criar perfil:', profileError.message);
    } else {
      console.log('‚úÖ Perfil criado com sucesso!');
    }
    
    // 5. Verificar se o usu√°rio foi criado corretamente
    console.log('\n5Ô∏è‚É£ VERIFICANDO USU√ÅRIO CRIADO...');
    const { data: profile, error: fetchError } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', authData.user.id)
      .single();
    
    if (fetchError) {
      console.error('‚ùå Erro ao buscar perfil:', fetchError.message);
    } else {
      console.log('‚úÖ Perfil encontrado:');
      console.log(`   Nome: ${profile.full_name}`);
      console.log(`   Email: ${profile.email}`);
      console.log(`   Fun√ß√£o: ${profile.funcao}`);
      console.log(`   Criado em: ${profile.created_at}`);
    }
    
    // 6. Limpar usu√°rio de teste
    console.log('\n6Ô∏è‚É£ LIMPANDO USU√ÅRIO DE TESTE...');
    const { error: deleteError } = await supabase.auth.admin.deleteUser(authData.user.id);
    
    if (deleteError) {
      console.error('‚ùå Erro ao deletar usu√°rio:', deleteError.message);
    } else {
      console.log('‚úÖ Usu√°rio de teste removido com sucesso!');
    }
    
    console.log('\nüéâ TESTE CONCLU√çDO COM SUCESSO!');
    console.log('‚úÖ O cadastro n√£o afeta a sess√£o atual do administrador');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
  }
}

testarCadastroSemLogin();