const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function verifyUserModule() {
    console.log('üîç Verificando estrutura do m√≥dulo de usu√°rios...\n');

    try {
        // 1. Verificar tabelas criadas
        console.log('üìã Verificando tabelas...');
        const tables = ['profiles', 'role_permissions', 'user_settings', 'user_activity_logs'];
        
        for (const table of tables) {
            const { data, error } = await supabase
                .from(table)
                .select('*')
                .limit(1);
            
            if (error) {
                console.log(`‚ùå Tabela ${table}: ${error.message}`);
            } else {
                console.log(`‚úÖ Tabela ${table}: OK`);
            }
        }

        // 2. Verificar permiss√µes por role
        console.log('\nüîê Verificando permiss√µes por role...');
        const { data: permissions, error: permError } = await supabase
            .from('role_permissions')
            .select('role, module, can_view, can_create, can_edit, can_delete');

        if (permError) {
            console.log(`‚ùå Erro ao buscar permiss√µes: ${permError.message}`);
        } else {
            const roleStats = {};
            permissions.forEach(perm => {
                if (!roleStats[perm.role]) {
                    roleStats[perm.role] = { total: 0, modules: [] };
                }
                roleStats[perm.role].total++;
                roleStats[perm.role].modules.push(perm.module);
            });

            Object.entries(roleStats).forEach(([role, stats]) => {
                console.log(`‚úÖ Role '${role}': ${stats.total} permiss√µes`);
                console.log(`   M√≥dulos: ${stats.modules.join(', ')}`);
            });
        }

        // 3. Verificar usu√°rios e roles
        console.log('\nüë• Verificando usu√°rios...');
        const { data: profiles, error: profileError } = await supabase
            .from('profiles')
            .select('role, active, status');

        if (profileError) {
            console.log(`‚ùå Erro ao buscar perfis: ${profileError.message}`);
        } else {
            const userStats = {};
            profiles.forEach(profile => {
                const key = `${profile.role}_${profile.active ? 'ativo' : 'inativo'}`;
                userStats[key] = (userStats[key] || 0) + 1;
            });

            console.log('Distribui√ß√£o de usu√°rios:');
            Object.entries(userStats).forEach(([key, count]) => {
                console.log(`‚úÖ ${key}: ${count} usu√°rios`);
            });
        }

        // 4. Verificar usu√°rio administrador padr√£o
        console.log('\nüëë Verificando usu√°rio administrador...');
        const { data: admin, error: adminError } = await supabase
            .from('profiles')
            .select('email, role, active')
            .eq('email', 'admin@vendas.com')
            .single();

        if (adminError) {
            console.log(`‚ùå Usu√°rio administrador n√£o encontrado: ${adminError.message}`);
        } else {
            console.log(`‚úÖ Administrador encontrado: ${admin.email} (${admin.role}, ${admin.active ? 'ativo' : 'inativo'})`);
        }

        // 5. Verificar pol√≠ticas RLS
        console.log('\nüõ°Ô∏è Verificando pol√≠ticas RLS...');
        const { data: policies, error: policyError } = await supabase.rpc('get_policies_info');
        
        if (policyError) {
            console.log('‚ÑπÔ∏è N√£o foi poss√≠vel verificar pol√≠ticas RLS automaticamente');
        } else {
            console.log('‚úÖ Pol√≠ticas RLS verificadas');
        }

        console.log('\nüéâ Verifica√ß√£o do m√≥dulo de usu√°rios conclu√≠da!');
        console.log('\nüìù Pr√≥ximos passos recomendados:');
        console.log('1. Testar login com o usu√°rio administrador (admin@vendas.com / admin123)');
        console.log('2. Atualizar o frontend para usar as novas permiss√µes');
        console.log('3. Criar interface de gerenciamento de usu√°rios');
        console.log('4. Testar cria√ß√£o de novos usu√°rios');

    } catch (error) {
        console.error('‚ùå Erro durante a verifica√ß√£o:', error.message);
    }
}

verifyUserModule();